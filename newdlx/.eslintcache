[{"C:\\newcode\\H2IC\\ParasolUI\\newdlx\\src\\App.tsx":"1","C:\\newcode\\H2IC\\ParasolUI\\newdlx\\src\\reportWebVitals.ts":"2"},{"size":4041,"mtime":1612457844561,"results":"3","hashOfConfig":"4"},{"size":440,"mtime":1612375501790,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"1n3siou",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\newcode\\H2IC\\ParasolUI\\newdlx\\src\\App.tsx",["11","12","13","14","15","16","17","18","19","20","21"],"import React, {useEffect, useState, FunctionComponent } from 'react';\r\nimport axios from 'axios';\r\nimport { useTheme } from '@material-ui/core/styles';\r\n//import SalesReports from \"./components/showReport\";\r\nimport { PowerBIEmbed } from 'powerbi-client-react';\r\nimport { models, Report, Embed, IEmbedConfiguration, service, Page } from 'powerbi-client';\r\nimport \"./App.css\"\r\ninterface ReportConfig {\r\n  type: string,\r\n  tokenType: number,\r\n  accessToken: string,\r\n  embedUrl: string,\r\n  reportId: string,\r\n  expiry: string,\r\n  status: number,\r\n  settings: any\r\n}\r\n\r\ninterface apiConfig {\r\n  accessToken: string,\r\n  embedUrl: any[],\r\n  expiry: string,\r\n  status: number\r\n}\r\nfunction App (): JSX.Element {\r\n\r\n\tconst [report, setReport] = useState<Report>();\r\n\r\n\t// API end-point url to get embed config for a sample report\r\n\tconst sampleReportUrl = 'https://aka.ms/sampleReportEmbedConfig';\r\n\r\n  const [sampleReportConfig, setReportConfig] = useState<ReportConfig>({\r\n\t\ttype: 'report',\r\n    embedUrl: '',\r\n    tokenType: models.TokenType.Embed,\r\n\t\treportId: '',\r\n    accessToken: '',\r\n    expiry: '',\r\n    status: 0,\r\n\t\tsettings: {\r\n      panes: {\r\n        filters: {\r\n          expanded: true,\r\n          visible: true\r\n        }\r\n      }\r\n    },\r\n\t});\r\n  const [displayMessage, setMessage] = useState(`The report is bootstrapped. Click the Embed Report button to set the access token`);\r\n\r\n  const theme = useTheme()\r\n  const getToken = async () => axios.get<apiConfig>('http://localhost:5300/getEmbedToken')\r\n                                    .then( resp => {\r\n                                      let reportCon = {\r\n                                          ...sampleReportConfig,\r\n                                          embedUrl: resp.data.embedUrl[0].embedUrl,\r\n                                          accessToken: resp.data.accessToken,\r\n                                          reportId: resp.data.embedUrl[0].reportId,\r\n                                          expiry: resp.data.expiry,\r\n                                          status: resp.data.status\r\n                                      }\r\n                                      setReportConfig(reportCon)\r\n                                    })\r\n                                    .catch(err => console.log(err));\r\n  useEffect(() => {    \r\n    console.log('call...')\r\n    getToken();\r\n    let timerId = setInterval(() => getToken(), 1000*60*10);\r\n //   timerId;\r\n    return () => {\r\n      clearInterval(timerId)\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n\t// Map of event handlers to be applied to the embedding report\r\n\t// const eventHandlersMap = new Map([\r\n\t// \t['loaded', function () {\r\n\t// \t\tconsole.log('Report has loaded');\r\n\t// \t}],\r\n\t// \t['rendered', function () {\r\n\t// \t\tconsole.log('Report has rendered');\r\n\t\t\t\r\n\t// \t\t// Update display message\r\n\t// \t\tsetMessage('The report is rendered')\r\n\t// \t}],\r\n\t// \t['error', async function (event?: service.ICustomEvent<any>) { \r\n\t// \t\tif (event) {\r\n  //       console.error(event.detail);\r\n  //       await getToken();\r\n  //       report && report.refresh().catch(error => { console.log( error ) });\r\n\t// \t\t}\r\n\t// \t}]\r\n\t// ]);\r\n\r\n  // const testClick = async () => {\r\n  //   await getToken();\r\n  //   report && report.refresh().catch(error => { console.log( error ) });\r\n  // }\r\n\tconst changeSettings = () => {\r\n\t\r\n\t\tsetReportConfig({\r\n\t\t\t...sampleReportConfig,\r\n\t\t\tsettings: {\r\n\t\t\t\tpanes: {\r\n\t\t\t\t\tfilters: {\r\n\t\t\t\t\t\texpanded: false,\r\n\t\t\t\t\t\tvisible: false\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\r\n return (\r\n   <div>\r\n  <div style={{height: \"100%\"}}>{sampleReportConfig.status === 200 && <PowerBIEmbed\r\n    embedConfig = {sampleReportConfig}\r\n//    eventHandlers = {eventHandlersMap}\r\n    cssClassName = { \"report-style-class\" }\r\n    getEmbeddedComponent = { (embedObject:Embed) => {\r\n      console.log(`Embedded object of type \"${ embedObject.embedtype }\" received`);\r\n      setReport(embedObject as Report);\r\n    } }\r\n  />}\r\n  </div>\r\n  {/* <button onClick={testClick}>Test click</button> */}\r\n  </div>\r\n )\r\n}\r\n\r\nexport default App;\r\n","C:\\newcode\\H2IC\\ParasolUI\\newdlx\\src\\reportWebVitals.ts",[],{"ruleId":"22","severity":1,"message":"23","line":1,"column":37,"nodeType":"24","messageId":"25","endLine":1,"endColumn":54},{"ruleId":"22","severity":1,"message":"26","line":6,"column":33,"nodeType":"24","messageId":"25","endLine":6,"endColumn":52},{"ruleId":"22","severity":1,"message":"27","line":6,"column":54,"nodeType":"24","messageId":"25","endLine":6,"endColumn":61},{"ruleId":"22","severity":1,"message":"28","line":6,"column":63,"nodeType":"24","messageId":"25","endLine":6,"endColumn":67},{"ruleId":"22","severity":1,"message":"29","line":27,"column":9,"nodeType":"24","messageId":"25","endLine":27,"endColumn":15},{"ruleId":"22","severity":1,"message":"30","line":30,"column":8,"nodeType":"24","messageId":"25","endLine":30,"endColumn":23},{"ruleId":"22","severity":1,"message":"31","line":49,"column":10,"nodeType":"24","messageId":"25","endLine":49,"endColumn":24},{"ruleId":"22","severity":1,"message":"32","line":49,"column":26,"nodeType":"24","messageId":"25","endLine":49,"endColumn":36},{"ruleId":"22","severity":1,"message":"33","line":51,"column":9,"nodeType":"24","messageId":"25","endLine":51,"endColumn":14},{"ruleId":"34","severity":1,"message":"35","line":73,"column":6,"nodeType":"36","endLine":73,"endColumn":8,"suggestions":"37"},{"ruleId":"22","severity":1,"message":"38","line":101,"column":8,"nodeType":"24","messageId":"25","endLine":101,"endColumn":22},"@typescript-eslint/no-unused-vars","'FunctionComponent' is defined but never used.","Identifier","unusedVar","'IEmbedConfiguration' is defined but never used.","'service' is defined but never used.","'Page' is defined but never used.","'report' is assigned a value but never used.","'sampleReportUrl' is assigned a value but never used.","'displayMessage' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'theme' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getToken'. Either include it or remove the dependency array.","ArrayExpression",["39"],"'changeSettings' is assigned a value but never used.",{"desc":"40","fix":"41"},"Update the dependencies array to be: [getToken]",{"range":"42","text":"43"},[2501,2503],"[getToken]"]